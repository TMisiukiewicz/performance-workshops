import React, {useCallback, useMemo, useState} from 'react';
import {View, Text, FlatList, StyleSheet} from 'react-native';
import TabView, {SceneMap} from 'react-native-bottom-tabs';
import {useAppSelector} from '../hooks';
import {selectBooks, selectAuthors, selectNormalizedBookById} from '../store';
import BookListItem from '../components/BookListItem';

// Wrapper component to connect id to book object
const BookListItemWrapper = ({id}: {id: string}) => {
  const book = useAppSelector(state => selectNormalizedBookById(state, id));
  return <BookListItem book={book} />;
};

const BooksRoute = () => {
  const favoriteBookIds = useAppSelector(
    state => state.favorites.favoriteBookIds,
  );

  const renderItem = useCallback(({item}: {item: string}) => {
    return <BookListItemWrapper id={item} />;
  }, []);

  if (favoriteBookIds.length === 0) {
    return (
      <View style={styles.emptyContainer}>
        <Text style={styles.emptyText}>üìö</Text>
        <Text style={styles.emptyTitle}>No favorite books yet</Text>
        <Text style={styles.emptySubtitle}>
          Tap the heart icon on any book to add it to your favorites
        </Text>
      </View>
    );
  }

  return (
    <FlatList
      data={favoriteBookIds}
      renderItem={renderItem}
      keyExtractor={item => item}
      contentContainerStyle={{paddingVertical: 8}}
    />
  );
};

const AuthorsRoute = () => {
  const favoriteBookIds = useAppSelector(
    state => state.favorites.favoriteBookIds,
  );
  const books = useAppSelector(selectBooks);
  const authors = useAppSelector(selectAuthors);

  const getCountryFlag = (country: string) => {
    const countryFlags: Record<string, string> = {
      'United States': 'üá∫üá∏',
      'United Kingdom': 'üá¨üáß',
      Canada: 'üá®üá¶',
      Australia: 'üá¶üá∫',
      Germany: 'üá©üá™',
      France: 'üá´üá∑',
      Italy: 'üáÆüáπ',
      Spain: 'üá™üá∏',
      Japan: 'üáØüáµ',
      China: 'üá®üá≥',
      India: 'üáÆüá≥',
      Brazil: 'üáßüá∑',
      Russia: 'üá∑üá∫',
      Mexico: 'üá≤üáΩ',
      Argentina: 'üá¶üá∑',
      Chile: 'üá®üá±',
      Colombia: 'üá®üá¥',
      Peru: 'üáµüá™',
      Venezuela: 'üáªüá™',
      Ecuador: 'üá™üá®',
      Uruguay: 'üá∫üáæ',
      Paraguay: 'üáµüáæ',
      Bolivia: 'üáßüá¥',
      Netherlands: 'üá≥üá±',
      Belgium: 'üáßüá™',
      Switzerland: 'üá®üá≠',
      Austria: 'üá¶üáπ',
      Poland: 'üáµüá±',
      'Czech Republic': 'üá®üáø',
      Slovakia: 'üá∏üá∞',
      Hungary: 'üá≠üá∫',
      Romania: 'üá∑üá¥',
      Bulgaria: 'üáßüá¨',
      Croatia: 'üá≠üá∑',
      Serbia: 'üá∑üá∏',
      Slovenia: 'üá∏üáÆ',
      'Bosnia and Herzegovina': 'üáßüá¶',
      Montenegro: 'üá≤üá™',
      'North Macedonia': 'üá≤üá∞',
      Albania: 'üá¶üá±',
      Greece: 'üá¨üá∑',
      Turkey: 'üáπüá∑',
      Cyprus: 'üá®üáæ',
      Malta: 'üá≤üáπ',
      Portugal: 'üáµüáπ',
      Ireland: 'üáÆüá™',
      Iceland: 'üáÆüá∏',
      Norway: 'üá≥üá¥',
      Sweden: 'üá∏üá™',
      Finland: 'üá´üáÆ',
      Denmark: 'üá©üá∞',
      Estonia: 'üá™üá™',
      Latvia: 'üá±üáª',
      Lithuania: 'üá±üáπ',
      Ukraine: 'üá∫üá¶',
      Belarus: 'üáßüáæ',
      Moldova: 'üá≤üá©',
      Georgia: 'üá¨üá™',
      Armenia: 'üá¶üá≤',
      Azerbaijan: 'üá¶üáø',
      Kazakhstan: 'üá∞üáø',
      Uzbekistan: 'üá∫üáø',
      Turkmenistan: 'üáπüá≤',
      Kyrgyzstan: 'üá∞üá¨',
      Tajikistan: 'üáπüáØ',
      Afghanistan: 'üá¶üá´',
      Pakistan: 'üáµüá∞',
      Bangladesh: 'üáßüá©',
      'Sri Lanka': 'üá±üá∞',
      Nepal: 'üá≥üáµ',
      Bhutan: 'üáßüáπ',
      Myanmar: 'üá≤üá≤',
      Thailand: 'üáπüá≠',
      Vietnam: 'üáªüá≥',
      Laos: 'üá±üá¶',
      Cambodia: 'üá∞üá≠',
      Malaysia: 'üá≤üáæ',
      Singapore: 'üá∏üá¨',
      Indonesia: 'üáÆüá©',
      Philippines: 'üáµüá≠',
      Brunei: 'üáßüá≥',
      'South Korea': 'üá∞üá∑',
      'North Korea': 'üá∞üáµ',
      Mongolia: 'üá≤üá≥',
      Taiwan: 'üáπüáº',
      'Hong Kong': 'üá≠üá∞',
      Macau: 'üá≤üá¥',
      Israel: 'üáÆüá±',
      Palestine: 'üáµüá∏',
      Jordan: 'üáØüá¥',
      Lebanon: 'üá±üáß',
      Syria: 'üá∏üáæ',
      Iraq: 'üáÆüá∂',
      Iran: 'üáÆüá∑',
      Kuwait: 'üá∞üáº',
      'Saudi Arabia': 'üá∏üá¶',
      Bahrain: 'üáßüá≠',
      Qatar: 'üá∂üá¶',
      'United Arab Emirates': 'üá¶üá™',
      Oman: 'üá¥üá≤',
      Yemen: 'üáæüá™',
      Egypt: 'üá™üá¨',
      Libya: 'üá±üáæ',
      Tunisia: 'üáπüá≥',
      Algeria: 'üá©üáø',
      Morocco: 'üá≤üá¶',
      Sudan: 'üá∏üá©',
      'South Sudan': 'üá∏üá∏',
      Ethiopia: 'üá™üáπ',
      Eritrea: 'üá™üá∑',
      Djibouti: 'üá©üáØ',
      Somalia: 'üá∏üá¥',
      Kenya: 'üá∞üá™',
      Uganda: 'üá∫üá¨',
      Tanzania: 'üáπüáø',
      Rwanda: 'üá∑üáº',
      Burundi: 'üáßüáÆ',
      'Democratic Republic of the Congo': 'üá®üá©',
      'Republic of the Congo': 'üá®üá¨',
      'Central African Republic': 'üá®üá´',
      Cameroon: 'üá®üá≤',
      Chad: 'üáπüá©',
      Niger: 'üá≥üá™',
      Nigeria: 'üá≥üá¨',
      Benin: 'üáßüáØ',
      Togo: 'üáπüá¨',
      Ghana: 'üá¨üá≠',
      'Burkina Faso': 'üáßüá´',
      Mali: 'üá≤üá±',
      Senegal: 'üá∏üá≥',
      Mauritania: 'üá≤üá∑',
      Gambia: 'üá¨üá≤',
      'Guinea-Bissau': 'üá¨üáº',
      Guinea: 'üá¨üá≥',
      'Sierra Leone': 'üá∏üá±',
      Liberia: 'üá±üá∑',
      'Ivory Coast': 'üá®üáÆ',
      'South Africa': 'üáøüá¶',
      Namibia: 'üá≥üá¶',
      Botswana: 'üáßüáº',
      Zimbabwe: 'üáøüáº',
      Zambia: 'üáøüá≤',
      Malawi: 'üá≤üáº',
      Mozambique: 'üá≤üáø',
      Madagascar: 'üá≤üá¨',
      Mauritius: 'üá≤üá∫',
      Seychelles: 'üá∏üá®',
      Comoros: 'üá∞üá≤',
      'Cape Verde': 'üá®üáª',
      'S√£o Tom√© and Pr√≠ncipe': 'üá∏üáπ',
      'Equatorial Guinea': 'üá¨üá∂',
      Gabon: 'üá¨üá¶',
      Angola: 'üá¶üá¥',
      Lesotho: 'üá±üá∏',
      Eswatini: 'üá∏üáø',
      'New Zealand': 'üá≥üáø',
      'Papua New Guinea': 'üáµüá¨',
      Fiji: 'üá´üáØ',
      'Solomon Islands': 'üá∏üáß',
      Vanuatu: 'üáªüá∫',
      Samoa: 'üáºüá∏',
      Tonga: 'üáπüá¥',
      Tuvalu: 'üáπüáª',
      Kiribati: 'üá∞üáÆ',
      Nauru: 'üá≥üá∑',
      Palau: 'üáµüáº',
      'Marshall Islands': 'üá≤üá≠',
      Micronesia: 'üá´üá≤',
    };

    return countryFlags[country] || 'üåç';
  };

  // Get all authors with their favorite books, sorted by favorite count
  const authorsWithBooks = useMemo(() => {
    return authors
      .map(author => {
        const authorBooks = books.filter(
          book =>
            book.authorId === author.id && favoriteBookIds.includes(book.id),
        );
        const totalBooks = books.filter(book => book.authorId === author.id);

        return {
          authorId: author.id,
          authorName: author.name,
          books: authorBooks,
          totalBooksCount: totalBooks.length,
        };
      })
      .filter(author => author.totalBooksCount > 0) // Filter out authors with 0 books
      .sort((a, b) => b.books.length - a.books.length); // Sort by favorite count descending
  }, [favoriteBookIds, books, authors]);

  if (authorsWithBooks.length === 0) {
    return (
      <View style={styles.emptyContainer}>
        <Text style={styles.emptyText}>üë®‚Äçüíº</Text>
        <Text style={styles.emptyTitle}>No authors found</Text>
        <Text style={styles.emptySubtitle}>
          Something went wrong loading the authors
        </Text>
      </View>
    );
  }

  const renderAuthorWithBooks = ({
    item,
  }: {
    item: (typeof authorsWithBooks)[0];
  }) => {
    const currentYear = new Date().getFullYear();
    const author = authors.find(a => a.id === item.authorId);
    const authorAge = author ? currentYear - author.birthYear : 0;

    const totalAwards = author?.awards || 0;
    const hasInternationalName =
      author?.nationality && author.nationality !== 'United States';
    const genreMatch = item.books.filter(
      book => book.genre === author?.primaryGenre,
    ).length;

    const sortedBooks = [...item.books].sort(
      (a, b) =>
        new Date(b.publishedDate).getTime() -
        new Date(a.publishedDate).getTime(),
    );
    const newestBook = sortedBooks[0];
    const oldestBook = sortedBooks[sortedBooks.length - 1];

    return (
      <View>
        <View style={styles.authorCard}>
          <View style={styles.authorInfo}>
            <Text style={styles.authorName}>{item.authorName}</Text>
            <View style={styles.countsContainer}>
              <Text style={styles.bookCount}>{item.books.length}</Text>
              <Text style={styles.totalCount}>/ {item.totalBooksCount}</Text>
            </View>
          </View>
          <Text style={styles.authorStats}>
            Age: {authorAge} | Awards: {totalAwards} | Genre matches:{' '}
            {genreMatch}
          </Text>
          {hasInternationalName && (
            <Text style={styles.nationality}>
              {getCountryFlag(author?.nationality || '')} {author?.nationality}
            </Text>
          )}
          {newestBook && (
            <Text style={styles.bookRange}>
              Newest: {new Date(newestBook.publishedDate).getFullYear()} -
              Oldest: {new Date(oldestBook.publishedDate).getFullYear()}
            </Text>
          )}
        </View>
        <View style={styles.booksList}>
          {item.books.map(book => (
            <BookListItemWrapper key={book.id} id={book.id} />
          ))}
        </View>
      </View>
    );
  };

  return (
    <FlatList
      testID="authors-list"
      data={authorsWithBooks}
      renderItem={renderAuthorWithBooks}
      keyExtractor={item => item.authorId}
      contentContainerStyle={{paddingVertical: 8}}
      removeClippedSubviews={false}
      initialNumToRender={50}
      maxToRenderPerBatch={30}
      windowSize={20}
      updateCellsBatchingPeriod={50}
    />
  );
};

const renderScene = SceneMap({
  books: BooksRoute,
  authors: AuthorsRoute,
});

const FavoritesScreen = () => {
  const favoriteBookIds = useAppSelector(
    state => state.favorites.favoriteBookIds,
  );

  const [index, setIndex] = useState(0);

  // Update route titles when counts change
  const updatedRoutes = useMemo(
    () => [
      {
        key: 'books',
        title: `Books (${favoriteBookIds.length})`,
      },
      {
        key: 'authors',
        title: 'Authors',
        testID: 'authors-tab',
      },
    ],
    [favoriteBookIds.length],
  );

  return (
    <View style={styles.container}>
      <Text style={styles.header}>
        Your Favorites ({favoriteBookIds.length})
      </Text>

      <TabView
        navigationState={{index, routes: updatedRoutes}}
        renderScene={renderScene}
        onIndexChange={setIndex}
        labeled={true}
        tabBarActiveTintColor="#007AFF"
        tabBarInactiveTintColor="#666"
        getIcon={({route, focused}) => {
          if (route.key === 'books') {
            return {
              sfSymbol: focused ? 'book.fill' : 'book',
            };
          } else if (route.key === 'authors') {
            return {
              sfSymbol: focused ? 'person.fill' : 'person',
            };
          }
          return undefined;
        }}
      />
    </View>
  );
};

export default FavoritesScreen;

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  header: {
    fontSize: 18,
    fontWeight: '600',
    color: '#333',
    textAlign: 'center',
    marginVertical: 16,
  },
  authorCard: {
    backgroundColor: '#f8f9fa',
    marginHorizontal: 16,
    marginVertical: 8,
    padding: 16,
    borderRadius: 8,
    borderWidth: 1,
    borderColor: '#e0e0e0',
  },
  authorInfo: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  authorName: {
    fontSize: 18,
    fontWeight: '600',
    color: '#333',
    flex: 1,
  },
  countsContainer: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  bookCount: {
    fontSize: 16,
    fontWeight: '600',
    color: '#007AFF',
    backgroundColor: '#e8f4fd',
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 12,
    minWidth: 32,
    textAlign: 'center',
  },
  totalCount: {
    fontSize: 14,
    color: '#666',
    marginLeft: 4,
  },
  booksList: {
    gap: 4,
  },
  emptyContainer: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    padding: 24,
  },
  emptyText: {
    fontSize: 48,
    marginBottom: 16,
  },
  emptyTitle: {
    fontSize: 20,
    fontWeight: '600',
    color: '#333',
    marginBottom: 8,
  },
  emptySubtitle: {
    fontSize: 16,
    color: '#666',
    textAlign: 'center',
    lineHeight: 22,
  },
  authorStats: {
    fontSize: 14,
    color: '#666',
    marginTop: 4,
  },
  bookRange: {
    fontSize: 14,
    color: '#666',
    marginTop: 4,
  },
  nationality: {
    fontSize: 14,
    color: '#666',
    marginTop: 4,
  },
});
